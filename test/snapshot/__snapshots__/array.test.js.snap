// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Array without keys deference array 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": OffsetLookup {
              "kind": "offsetlookup",
              "offset": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "bar",
                    },
                    "what": Variable {
                      "byref": false,
                      "curly": false,
                      "kind": "variable",
                      "name": "foo",
                    },
                  },
                },
              },
              "what": Call {
                "arguments": Array [
                  Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                ],
                "kind": "call",
                "what": Array {
                  "items": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"a\\"",
                      "unicode": false,
                      "value": "a",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"b\\"",
                      "unicode": false,
                      "value": "b",
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys mixed tests / coverage test empty array 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys mixed tests / coverage test short form / keys 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Entry {
            "key": Number {
              "kind": "number",
              "value": "0",
            },
            "kind": "entry",
            "value": Variable {
              "byref": true,
              "curly": false,
              "kind": "variable",
              "name": "foo",
            },
          },
          Entry {
            "key": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "bar",
            },
            "kind": "entry",
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"foobar\\"",
              "unicode": false,
              "value": "foobar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys of arrays 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Array {
            "items": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"item1\\"",
                "unicode": false,
                "value": "item1",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"item2\\"",
                "unicode": false,
                "value": "item2",
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
          Array {
            "items": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"item3\\"",
                "unicode": false,
                "value": "item3",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"item4\\"",
                "unicode": false,
                "value": "item4",
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
          Array {
            "items": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"item5\\"",
                "unicode": false,
                "value": "item5",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"item6\\"",
                "unicode": false,
                "value": "item6",
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys of numbers 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Number {
            "kind": "number",
            "value": "2.5",
          },
          Number {
            "kind": "number",
            "value": "0x1000",
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys of objects 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          New {
            "arguments": Array [],
            "kind": "new",
            "what": ClassReference {
              "kind": "classreference",
              "name": "foo",
              "resolution": "uqn",
            },
          },
          New {
            "arguments": Array [],
            "kind": "new",
            "what": ClassReference {
              "kind": "classreference",
              "name": "stdClass",
              "resolution": "uqn",
            },
          },
          New {
            "arguments": Array [],
            "kind": "new",
            "what": ClassReference {
              "kind": "classreference",
              "name": "bar",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys of strings 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"item1\\"",
            "unicode": false,
            "value": "item1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"item2\\"",
            "unicode": false,
            "value": "item2",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"item3\\"",
            "unicode": false,
            "value": "item3",
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys of strings and numbers 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"item2\\"",
            "unicode": false,
            "value": "item2",
          },
          Number {
            "kind": "number",
            "value": "3",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"item4\\"",
            "unicode": false,
            "value": "item4",
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys of variables 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "obj1",
          },
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "obj2",
          },
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "obj3",
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys single and empty (short form) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Array without keys single and empty 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
