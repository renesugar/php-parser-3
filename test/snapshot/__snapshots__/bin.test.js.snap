// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bin != 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "!=",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin !== 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "!==",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin % 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "%",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin & 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "&",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin && 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "&&",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin * 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "*",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin ** 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "**",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin + 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin . 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": ".",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin / 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "/",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin < 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "<",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin << 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "<<",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin <= 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "<=",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin <=> 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "<=>",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin == 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "==",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin === 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "===",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin > 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": ">",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin >= 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": ">=",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin >> 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": ">>",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin ?? 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "??",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin ^ 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "^",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin | 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "|",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin || 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "||",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin - 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "-",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin and 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "and",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin assign 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "right": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin instanceof 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Identifier {
          "kind": "identifier",
          "name": ClassReference {
            "kind": "classreference",
            "name": "MyClass",
            "resolution": "uqn",
          },
        },
        "type": "instanceof",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin instanceof parent 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": ParentReference {
          "kind": "parentreference",
          "raw": "parent",
        },
        "type": "instanceof",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin instanceof self 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": SelfReference {
          "kind": "selfreference",
          "raw": "self",
        },
        "type": "instanceof",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin instanceof static 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": StaticReference {
          "kind": "staticreference",
          "raw": "static",
        },
        "type": "instanceof",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin instanceof variable 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "type": "instanceof",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin multiple 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
            "right": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
            "type": "+",
          },
          "right": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin multiple instanceof static 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
          "right": StaticReference {
            "kind": "staticreference",
            "raw": "static",
          },
          "type": "instanceof",
        },
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
          "right": SelfReference {
            "kind": "selfreference",
            "raw": "self",
          },
          "type": "instanceof",
        },
        "type": "&&",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin or 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "or",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin parens 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "parenthesizedExpression": true,
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin parens around \`and\` 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "parenthesizedExpression": true,
          "right": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "and",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin parens around \`or\` 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "parenthesizedExpression": true,
          "right": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "or",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin parens around \`xor\` 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "parenthesizedExpression": true,
          "right": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "xor",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`bin xor 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "xor",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
