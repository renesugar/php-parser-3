// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test scalar statements test constants 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Unary {
            "kind": "unary",
            "type": "-",
            "what": Number {
              "kind": "number",
              "value": "5",
            },
          },
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ref",
            },
            "what": ClassReference {
              "kind": "classreference",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test scalar statements test dereferencable 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "test",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "5",
            },
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "bar",
                },
                "what": ClassReference {
                  "kind": "classreference",
                  "name": "foo",
                  "resolution": "uqn",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": New {
              "arguments": Array [],
              "kind": "new",
              "parenthesizedExpression": true,
              "what": ClassReference {
                "kind": "classreference",
                "name": "test",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "c",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "5",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "parenthesizedExpression": true,
            "what": ClassReference {
              "kind": "classreference",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "d",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "5",
            },
          ],
          "kind": "call",
          "what": Closure {
            "arguments": Array [
              Parameter {
                "byref": false,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "a",
                },
                "nullable": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "body": Block {
              "children": Array [
                Return {
                  "expr": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "byref": false,
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "2",
                    },
                    "type": "*",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "isStatic": false,
            "kind": "closure",
            "nullable": false,
            "parenthesizedExpression": true,
            "type": null,
            "uses": Array [],
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
