// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test expressions chaining calls (derefenceable) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "bar",
        },
        "what": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "10",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "call",
                },
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "b",
                  },
                  "parenthesizedExpression": true,
                  "what": Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 2`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "foo",
        },
        "what": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Array {
            "items": Array [
              Number {
                "kind": "number",
                "value": "1",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
              Number {
                "kind": "number",
                "value": "3",
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 3`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Encapsed {
              "kind": "encapsed",
              "type": "offset",
              "value": Array [
                Identifier {
                  "kind": "identifier",
                  "name": "bar",
                },
                Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "baz",
                },
              ],
            },
            "what": Call {
              "arguments": Array [
                Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "foo",
                },
              ],
              "kind": "call",
              "what": Post {
                "kind": "post",
                "parenthesizedExpression": true,
                "type": "+",
                "what": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 4`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Post {
        "kind": "post",
        "parenthesizedExpression": true,
        "type": "+",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "baz",
        },
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": ClassReference {
            "kind": "classreference",
            "name": "bar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [
    Error {
      "expected": ";",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected 'bar' (T_STRING), expecting ';' on line 1",
      "token": "'bar' (T_STRING)",
    },
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '::' (T_DOUBLE_COLON) on line 1",
      "token": "'::' (T_DOUBLE_COLON)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 5`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "baz",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "foo",
              },
              "what": Call {
                "arguments": Array [],
                "kind": "call",
                "what": ClassReference {
                  "kind": "classreference",
                  "name": "bar",
                  "resolution": "uqn",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions fix #234 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ClassReference {
          "kind": "classreference",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": New {
            "arguments": Array [],
            "kind": "new",
            "parenthesizedExpression": true,
            "what": ClassReference {
              "kind": "classreference",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions fix #235 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": ClassReference {
          "kind": "classreference",
          "name": "self",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": ClassReference {
          "kind": "classreference",
          "name": "sElF",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": ClassReference {
          "kind": "classreference",
          "name": "parent",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": ClassReference {
          "kind": "classreference",
          "name": "pArEnT",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": ParentReference {
            "kind": "parentreference",
            "raw": "parent",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": SelfReference {
          "kind": "selfreference",
          "raw": "self",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": StaticReference {
          "kind": "staticreference",
          "raw": "static",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ParentReference {
          "kind": "parentreference",
          "raw": "parent",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions should assign class static 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
          "what": ClassReference {
            "kind": "classreference",
            "name": "a",
            "resolution": "uqn",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions should fail to assign class constants 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "what": ClassReference {
            "kind": "classreference",
            "name": "foo",
            "resolution": "uqn",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [
    Error {
      "expected": "VARIABLE",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '=' on line 1",
      "token": "'='",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions should fail to assign constants 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Identifier {
          "kind": "identifier",
          "name": ClassReference {
            "kind": "classreference",
            "name": "a",
            "resolution": "uqn",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [
    Error {
      "expected": "VARIABLE",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '=' on line 1",
      "token": "'='",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions test assignements 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": ".=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "+=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "-=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "*=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "**=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "/=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "&=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "|=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "%=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "^=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "<<=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": ">>=",
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test binary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "|",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "&",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "^",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"1\\"",
          "unicode": false,
          "value": "1",
        },
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"3\\"",
          "unicode": false,
          "value": "3",
        },
        "type": ".",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "-",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "*",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "/",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "%",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "**",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "<<",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "1",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": ">>",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test cast 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(int)",
        "type": "int",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(integer)",
        "type": "int",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(bool)",
        "type": "bool",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(boolean)",
        "type": "bool",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(float)",
        "type": "float",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(double)",
        "type": "float",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(real)",
        "type": "float",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(string)",
        "type": "string",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(binary)",
        "type": "binary",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(array)",
        "type": "array",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(object)",
        "type": "object",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Cast {
        "kind": "cast",
        "raw": "(unset)",
        "type": "unset",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test cast extension - #171 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "int",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(int)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "int",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(integer)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "bool",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(bool)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "bool",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(boolean)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "float",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(float)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "float",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(double)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "float",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(real)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "string",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(string)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "binary",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(binary)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "array",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(array)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "object",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(object)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Variable {
        "byref": false,
        "cast": "unset",
        "curly": false,
        "kind": "variable",
        "name": "var",
        "rawCast": "(unset)",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test exit 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Exit {
        "kind": "exit",
        "status": Number {
          "kind": "number",
          "value": "1",
        },
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Exit {
        "kind": "exit",
        "status": null,
        "useDie": true,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Exit {
        "kind": "exit",
        "status": null,
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test fail new 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": ClassReference {
            "kind": "classreference",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [
    Error {
      "expected": ";",
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, unexpected '[', expecting ';' on line 2",
      "token": "'['",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions test generators 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": YieldFrom {
              "kind": "yieldfrom",
              "value": Call {
                "arguments": Array [],
                "kind": "call",
                "what": ClassReference {
                  "kind": "classreference",
                  "name": "foo",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "yield",
              "value": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "gen",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test if based returns 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "type": "??",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "kind": "retif",
        "test": Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
          "right": Number {
            "kind": "number",
            "value": "5",
          },
          "type": ">",
        },
        "trueExpr": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "kind": "retif",
        "test": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test incr/decr 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Post {
        "kind": "post",
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 2,
            "offset": 12,
          },
          "source": null,
          "start": Position {
            "column": 6,
            "line": 2,
            "offset": 7,
          },
        },
        "type": "+",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 8,
              "line": 2,
              "offset": 9,
            },
            "source": null,
            "start": Position {
              "column": 6,
              "line": 2,
              "offset": 7,
            },
          },
          "name": "i",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 2,
          "offset": 12,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 2,
          "offset": 7,
        },
      },
    },
    ExpressionStatement {
      "expression": Post {
        "kind": "post",
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 3,
            "offset": 24,
          },
          "source": null,
          "start": Position {
            "column": 6,
            "line": 3,
            "offset": 19,
          },
        },
        "type": "-",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 8,
              "line": 3,
              "offset": 21,
            },
            "source": null,
            "start": Position {
              "column": 6,
              "line": 3,
              "offset": 19,
            },
          },
          "name": "i",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 3,
          "offset": 24,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 3,
          "offset": 19,
        },
      },
    },
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 4,
            "offset": 36,
          },
          "source": null,
          "start": Position {
            "column": 6,
            "line": 4,
            "offset": 31,
          },
        },
        "type": "+",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 10,
              "line": 4,
              "offset": 35,
            },
            "source": null,
            "start": Position {
              "column": 8,
              "line": 4,
              "offset": 33,
            },
          },
          "name": "i",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 4,
          "offset": 36,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 4,
          "offset": 31,
        },
      },
    },
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 5,
            "offset": 48,
          },
          "source": null,
          "start": Position {
            "column": 6,
            "line": 5,
            "offset": 43,
          },
        },
        "type": "-",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 10,
              "line": 5,
              "offset": 47,
            },
            "source": null,
            "start": Position {
              "column": 8,
              "line": 5,
              "offset": 45,
            },
          },
          "name": "i",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 5,
          "offset": 48,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 5,
          "offset": 43,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 4,
      "line": 6,
      "offset": 53,
    },
    "source": null,
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test expressions test more binary ops (formerly bool) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "&&",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "and",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "||",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "or",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "xor",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "===",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "!==",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "==",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "!=",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": ">",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "<",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": ">=",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "<=",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "<=>",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "type": "instanceof",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test nested expressions precedence 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "5",
            },
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "*",
          },
          "right": Number {
            "kind": "number",
            "value": "1",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "5",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "2",
            },
            "parenthesizedExpression": true,
            "right": Number {
              "kind": "number",
              "value": "1",
            },
            "type": "+",
          },
          "type": "*",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "c",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "1",
            },
            "right": Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "2",
              },
              "right": Number {
                "kind": "number",
                "value": "3",
              },
              "type": "/",
            },
            "type": "+",
          },
          "right": Number {
            "kind": "number",
            "value": "4",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "d",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "1",
            },
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "!==",
          },
          "right": Number {
            "kind": "number",
            "value": "3",
          },
          "type": "&&",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test new 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": ClassReference {
            "kind": "classreference",
            "name": "\\\\foo",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "class",
            },
            "what": ClassReference {
              "kind": "classreference",
              "name": "foo",
              "resolution": "rn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Class {
            "body": Array [],
            "extends": ClassReference {
              "kind": "classreference",
              "name": "foo",
              "resolution": "uqn",
            },
            "implements": Array [
              ClassReference {
                "kind": "classreference",
                "name": "bar",
                "resolution": "uqn",
              },
            ],
            "isAbstract": false,
            "isAnonymous": true,
            "isFinal": false,
            "kind": "class",
            "name": null,
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test node references 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": ParentReference {
            "kind": "parentreference",
            "raw": "parent",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": SelfReference {
          "kind": "selfreference",
          "raw": "self",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": StaticReference {
          "kind": "staticreference",
          "raw": "static",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": ParentReference {
          "kind": "parentreference",
          "raw": "parent",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test silent 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [],
          "kind": "call",
          "what": ClassReference {
            "kind": "classreference",
            "name": "trigger_error",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test unary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "~",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
